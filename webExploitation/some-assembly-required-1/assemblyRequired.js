//The commands, dom objects, and the flag are in this list jumpled up.

const randomList = [ 'value',
 '2wfTpTR',
 'instantiate',
 '275341bEPcme',
 'innerHTML',
 '1195047NznhZg', 
 '1qfevql',
 'input',
 '1699808QuoWhA',
 'Correct!',
 'check_flag',
 'Incorrect!',
 './JIFxzHyW8W',
 '23SMpAuA',
 '802698XOMSrr',
 'charCodeAt',
 '474547vVoGDO',
 'getElementById',
 'instance',
 'copy_char',
 '43591XxcWUl',
 '504454llVtzW',
 'arrayBuffer',
 '2NIQmVj',
 'result'];
 // The list is jumbeled up from the second function, using the push and shift, here is the list after javascript has run.
//  [
//     "instance",      // 0
//     "copy_char",     // 1
//     "43591XxcWUl",   // 2
//     "504454llVtzW",  // 3
//     "arrayBuffer",   // 4
//     "2NIQmVj",       // 5
//     "result",        // 6
//     "value",         // 7
//     "2wfTpTR",       // 8
//     "instantiate",   // 9
//     "275341bEPcme",  // 10
//     "innerHTML",     // 11
//     "1195047NznhZg", // 12
//     "1qfevql",       // 13
//     "input",         // 14
//     "1699808QuoWhA", // 15
//     "Correct!",      // 16
//     "check_flag",    // 17
//     "Incorrect!",    // 18
//     "./JIFxzHyW8W",  // 19
//     "23SMpAuA",      // 20
//     "802698XOMSrr",  // 21
//     "charCodeAt",    // 22
//     "474547vVoGDO",  // 23
//     "getElementById" // 24
//   ]
 //Function gets element at list index passed in.
const atListIndex = function (index,
 useless) {
    let item = randomList[index];
    return item;
};
(function (randomList, largeNum) {
    const atIndexPointer = atListIndex;
    while (!![]) {
        try {
            const _0x478583 = -parseInt(atIndexPointer(21)) + parseInt(atIndexPointer(23)) + -parseInt(atIndexPointer(5)) * -parseInt(atIndexPointer(3)) + -parseInt(atIndexPointer(12)) * -parseInt(atIndexPointer(13)) + -parseInt(atIndexPointer(8)) * parseInt(atIndexPointer(10)) + parseInt(atIndexPointer(2)) * parseInt(atIndexPointer(20)) + -parseInt(atIndexPointer(15));
            if (_0x478583 === largeNum) break;
            else randomList['push'](randomList['shift']());
        } catch (_0x41d31a) {
            randomList['push'](randomList['shift']());
        }
    }
}(randomList, 627437));
let exports;
(async () => {
    const atIndexPointer = atListIndex;
    // 1. Get the contents from http://mercury.picoctf.net:15472/JIFxzHyW8W which appear  to be a binary file, probably an object we need to cast
    //
    let _0x5f0229 = await fetch(atIndexPointer(19)), _39e9 = await WebAssembly[atIndexPointer(9)](await _0x5f0229[atIndexPointer(4)]()), _0x1f8628 = _39e9[atIndexPointer(470)];
    exports = _0x1f8628['exports'];
})();
function onButtonPress() {
    const atIndexPointer = atListIndex;
    //Get value in input field
    let value = document['getElementById'](atIndexPointer(14))[atIndexPointer(7)];
    for (let i = 0; i < value['length']; i++) {
        exports[atIndexPointer(1)](value[atIndexPointer(22)](i), i);
    } 
    exports['copy_char'](0,
 value['length']),
 exports[atIndexPointer(17)]() == 1 ? document[atIndexPointer(24)](atIndexPointer(6))[atIndexPointer(11)] = atIndexPointer(16) : document[atIndexPointer(24)](atIndexPointer(6))[atIndexPointer(11)] = atIndexPointer(18);
}